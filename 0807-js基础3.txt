1.控制语句
也叫程序流程控制，分为循环和判断
建议:流程图制作（visio  processon ）
	1>判断语句(条件判断)
	根据条件来选择一个任务分支语句的统称，js提供if判断语句和switch判断语句
		a.if语句
			if语句测试的是一个布尔类型表达式，如果结果为真则执行某段程序
			if ( 表达式 )     //条件判断语句
			｛
				语句组;       //满足条件时候所执行的代码
			｝
			注意:表达式一定要有，语句组是可选，可以通过一条或者多条语句组成
			注意：if语句花括号一定是成对出现，不能交叉嵌套
		b.if-else语句
			if语句根据表达式的值，决定是否执行某个任务，没有其他选择(只有2种选择)
			if ( 表达式 )
			｛
				语句组;
			｝
			else
			｛
				语句组；
			｝
		c.if-else-if语句
			当有多个可供判断条件时候单个if-else表达不完全，使用if-else-if，而不是单个的语句，是多个if-else实现多路判断
			if ( 表达式 )
			｛
				语句组;
			｝
			else if ( 表达式  )
			｛
				语句组;
			｝
			...
			else
			{
				语句组;
			}
			注意:表达式一定要有，语句组可以使一条或者多条语句组成
		d.switch语句
			使用if-else实现多路选择不易于维护，可以使用switch语句代替，在给定多个选择中选择一个符合条件的分支来执行
			switch ( 表达式 )
			{
				case 标识1:
					语句组;
				case 标识2:
					语句组;
			}
	2.循环语句
		编程中有些代码需要执行多次，需要写入大量代码，计算机快速解决重复和繁琐的，将重复执行语句放在循环中根据条件执行，js循环包括for，while，do..while,for ...in 等
		a.for语句
			重复执行的代码使用for比较合适
			for ( 表达式1;表达式2;表达式3 )
			{
				语句组;
			}
		b.for in语句
			for ( 变量  in  集合 )
			{
				语句组;
			}
			注意:变量作为集合中一个元素，当集合中元素个数为0时候不执行循环体
		c.while语句
			当重复执行动作比较简单时候可以使用while代替for循环，while循环在执行循环体前会测试一个条件，如果该条件成立，立刻进入循环体，否则调到循环体后第一条语句
			while ( 条件表达式 )
			{
				语句组;
			}
			注意:条件表达式必选，无论返回什么类型值都是作为布尔类型处理
		d.do-while语句
			while循环进入循环前测试条件表达式是否成立，do..while循环是先执行一遍循环体，循环语句执行后再测试表达式，如果成立，进行下一轮测试
		e.跳出循环
			再循环体重直接控制循环或者进行下一轮循环
			break 	 无条件跳出并且结束当前循环结构
			continue 忽略后面语句并且结束本轮循环和开始下一轮循环
3.异常处理
	程序运行时候出错，出错后结果是不正常的，产生的错误称为异常，js中使用的异常处理语句：try-catch、try-catch-finally..	
		a.try-catch语句
			是异常捕获和处理代码的结构
			try {
				语句组;
			}
			catch(异常)
			{
				语句组;
			}
			注意:try里面语句组是必选，异常也是必选，可以使用任意变量名，用于引用错误发生时候的错误对象，catch中的语句组是可选的，处理try中的错误
			a1.事情有的挽回，换条路走
				try {
					执行某个逻辑
				}
				catch（e）
				{
					出问题鸟，换个逻辑
				}
			a2.体面的退出
				try {
				执行某个业务逻辑
				}
				catch (e)
				{
					弹窗告诉用户：你妹的，出问题了！
					如果是用错误告诉用户错哪里了
					如果是程序错误，告诉用户，对不住，出事了，爱咋咋地！
				}
		b.try-catch-fainally
			和try-catch作用一样，唯一区别就是当所有过程执行完毕后前者的finally无条件执行，也就是说，无论如何都会执行finally
				try {
					语句组;
				}
				catch(异常)
				{
					语句组;
				}
				finally {
					语句组；
				}
		c.throw语句
			多个异常处理可以嵌套使用，多个结构嵌套时候处理try-catch就会出问题，手动throw来抛出异常
			throw 异常;
