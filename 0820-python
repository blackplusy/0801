1.字符串
	a.字符串的应用场景
	b.字符串的索引
	c.字符串的切片
	d.其他操作
	e.引号

	a.字符串的应用场景
		1>用户名、密码、邮箱
		2>电话号码升级
			0452-88695040
			0452-68869504
		3>爬虫网站域名
			www.baidu.com---baidu
			www.acfun.com---acfun
		4>分词
			hello ，im your papa
			你知不知道我知道你知道我不知道你知道
		5>密码破解
	b.字符串的索引
		索引：下标，从0开始，可以从左到右，也可以从右到左
		字符串可以通过string[x],x作为索引进行字符串的截取
		b   a   i   d   u
		0   1   2   3   4      ->
		-5  -4  -3  -2  -1     <-
	c.字符串切片
		切片：通过索引截取所需要的信息，截取的信息是x,y-1
	d.其他操作
		1>拼接
		2>遍历
		3>去空格
		4>计算长度		
	e.引号
		单引号
		双引号
		三引号
		三引号作用：注释、说明、多行打印
	f.补充
	startswith  变量以什么开头
	endswith    变量以什么结尾
	replace     替换
	index       搜索第一次出现的索引
	split       把字符串按照指定条件拆分成列表
	isalnum     所有字符都是数字或者字母
	isalpha     所有字符都是字母
	isdigit     所有字符都是数字
	islower     所有字符都是小写
	isupper     所有字符都是大写
	istitle    所有单词都是首字母大写	   

2.列表
	a.序列
	b.列表的应用场景
	c.列表
	d.列表的访问
	e.列表的索引和切片
	f.列表拼接
	g.列表更新
	h.列表的删除

	a.序列
	序列是python中基本的数据结构
	序列中每一个元素分配一个数字标识他们的位置，索引
	列表和元素使用最多
	序列都可以进行索引、切片、拼接
	b.列表的应用场景
		1>taobao中商品加入购物车的时候
		2>自动化投简历屏蔽某些公司
		3>爬虫页面屏蔽某些信息
	c.列表
	列表是python中常见的数据类型，中括号中都好分开元素，元素可以不同数据类型的数据
		l=[1,2,3]
		l=[1,'08ma','2','ladeng']
		l=[1,2,[3,4]]
	d.列表的访问
		直接输出
		遍历
		成员
	e.列表的索引和切片
		索引可以理解为下标，左侧从0开始，右侧从-1开始
		常见报错:list index out of range 索引超出范围
	f.列表的拼接
	g.列表的更新
		通过索引定位，进行相应设置
	h.列表的删除
		del 可以删除指定元素，也可以删除整个列表


3.列表2
	insert(索引，值)  插入
	extend           扩展(元素、列表)
	index            第一次出现的索引
	enumerate        枚举
	a.栈的方式访问列表
	b.获取列表索引
	c.enumerate
	d.列表的排序
	e.列表推导式

	a.栈的方式访问列表
		1>队列    先进先出，后进后出
		2>栈      先进后出，后进先出
	b.获取列表索引
	c.enumerate 枚举
	d.列表的排序
		list.reverse()  反向打印
		list.sort()     排序
	e.列表推导式
		列表推导式又叫列表解析式，提供一种简单方法创建列表
		结构中包含一个表达式，可以有0个或者多个if语句，表达式是任意类型对象，返回结果是一个新的列表

		优势
			1>代码短，可读性好
			2>速度快

		列表推导式
			标准格式
			[表达式 for 变量 in 列表]
			[表达式 for 变量 in 列表 if 条件]

4.元组
	元组和列表类似，小括号中包含元素，元素之间通过逗号进行分割
	(1,2,3)
	('simida','gaga')
	a.元组和列表的区别
	b.创建元组
	c.访问元组
	d.删除元组
	e.元组的切片和索引
	f.补充		

	a.元组和列表的区别
		敏感信息传递给一个不了解函数，希望这个数据不被改动使用元组
		处理动态数据时候，经常更新数据，使用列表
		元组不可变，列表可变
		元组的速度快
	b.创建元组
		注意:如果元祖中只包含一个元素，需要后面增加逗号消除歧义
	c.访问元组
		直接访问
		遍历访问
		成员访问
	d.删除元组
		del 
	e.元组的切片和索引
	f.补充
		len()   元素的个数(长度)
		max()   元组中最大值
		min()   元组中最小值
		注意:max、min必须是同一种数据类型作比较
		元组.index()  元组中某个值第一次出现匹配的索引
		元组.count()  元组中某个元素出现的个数

5.字典
	a.字典的应用场景
	b.创建字典
	c.访问字典
	d.删除字典
	e.修改字典
	f.补充

	a.字典的应用场景
		1>前后端数据传输
		2>浏览器提交数据给服务器
		3>接口开发
	b.创建字典
		字典是python中的映射数据类型
		由键值对组成  name:'gaga'
		一般是字符串或者数字作为键
		dic={'name':'gaga','age':18}
		dic={'age':10}
	c.访问字典
		直接访问
		数据筛选
	d.删除字典
		1.del
		删除指定元素(键值对)
		删除整个字典(不能访问)
		2.clear
		清空字典
	e.修改字典
	f.补充
		1.keys(键)
		2.values(值)
		3.items(键值对)


练习:
    1. 提示用户输入内容，如果为空则提示！
    2. 判断用户输入的字符串首字母是否为元音（A、E、I、O、U）
    3. 如果为元音，则在字符串后加上'ay'
        eg. 如果用户输入'apple'->'appleay'
    4. 如果首字母为辅音字母，则将该字符串首字母移动结尾，并加上'ay'
        eg. 如果用户输入'hello'->'ellohay'。

列表练习：
	修改列表中名字为gaga的为hello
	names列表里有3个2，请返回第二个2的索引值，不要人肉，要动态找


字典练习
1.设计一个登陆的程序，不同的用户名和对应密码存在一个字典里面，输入正确的用户名和密码去登陆，
2.首先输入用户名，如果用户名不存在或者为空，则一直提示输入正确的用户名
3.当用户名正确的时候，提示去输入密码，如果密码跟用户名不对应，则提示密码错误请重新输入。




